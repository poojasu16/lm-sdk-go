// Code generated by go-swagger; DO NOT EDIT.

package lm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/logicmonitor/lm-sdk-go/v3/models"
)

// PatchCollectorByIDReader is a Reader for the PatchCollectorByID structure.
type PatchCollectorByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchCollectorByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchCollectorByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewPatchCollectorByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchCollectorByIDOK creates a PatchCollectorByIDOK with default headers values
func NewPatchCollectorByIDOK() *PatchCollectorByIDOK {
	return &PatchCollectorByIDOK{}
}

/* PatchCollectorByIDOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchCollectorByIDOK struct {
	Payload *models.Collector
}

func (o *PatchCollectorByIDOK) Error() string {
	return fmt.Sprintf("[PATCH /setting/collector/collectors/{id}][%d] patchCollectorByIdOK  %+v", 200, o.Payload)
}
func (o *PatchCollectorByIDOK) GetPayload() *models.Collector {
	return o.Payload
}

func (o *PatchCollectorByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Collector)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCollectorByIDDefault creates a PatchCollectorByIDDefault with default headers values
func NewPatchCollectorByIDDefault(code int) *PatchCollectorByIDDefault {
	return &PatchCollectorByIDDefault{
		_statusCode: code,
	}
}

/* PatchCollectorByIDDefault describes a response with status code -1, with default header values.

Error
*/
type PatchCollectorByIDDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the patch collector by Id default response
func (o *PatchCollectorByIDDefault) Code() int {
	return o._statusCode
}

func (o *PatchCollectorByIDDefault) Error() string {
	return fmt.Sprintf("[PATCH /setting/collector/collectors/{id}][%d] patchCollectorById default  %+v", o._statusCode, o.Payload)
}
func (o *PatchCollectorByIDDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PatchCollectorByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
