// Code generated by go-swagger; DO NOT EDIT.

package lm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/logicmonitor/lm-sdk-go/v3/models"
)

// GetDeviceDatasourceInstanceAlertSettingListOfDeviceReader is a Reader for the GetDeviceDatasourceInstanceAlertSettingListOfDevice structure.
type GetDeviceDatasourceInstanceAlertSettingListOfDeviceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDeviceDatasourceInstanceAlertSettingListOfDeviceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDeviceDatasourceInstanceAlertSettingListOfDeviceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetDeviceDatasourceInstanceAlertSettingListOfDeviceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetDeviceDatasourceInstanceAlertSettingListOfDeviceOK creates a GetDeviceDatasourceInstanceAlertSettingListOfDeviceOK with default headers values
func NewGetDeviceDatasourceInstanceAlertSettingListOfDeviceOK() *GetDeviceDatasourceInstanceAlertSettingListOfDeviceOK {
	return &GetDeviceDatasourceInstanceAlertSettingListOfDeviceOK{}
}

/* GetDeviceDatasourceInstanceAlertSettingListOfDeviceOK describes a response with status code 200, with default header values.

successful operation
*/
type GetDeviceDatasourceInstanceAlertSettingListOfDeviceOK struct {
	Payload *models.DeviceDataSourceInstanceAlertSettingPaginationResponse
}

func (o *GetDeviceDatasourceInstanceAlertSettingListOfDeviceOK) Error() string {
	return fmt.Sprintf("[GET /device/devices/{deviceId}/alertsettings][%d] getDeviceDatasourceInstanceAlertSettingListOfDeviceOK  %+v", 200, o.Payload)
}
func (o *GetDeviceDatasourceInstanceAlertSettingListOfDeviceOK) GetPayload() *models.DeviceDataSourceInstanceAlertSettingPaginationResponse {
	return o.Payload
}

func (o *GetDeviceDatasourceInstanceAlertSettingListOfDeviceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeviceDataSourceInstanceAlertSettingPaginationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeviceDatasourceInstanceAlertSettingListOfDeviceDefault creates a GetDeviceDatasourceInstanceAlertSettingListOfDeviceDefault with default headers values
func NewGetDeviceDatasourceInstanceAlertSettingListOfDeviceDefault(code int) *GetDeviceDatasourceInstanceAlertSettingListOfDeviceDefault {
	return &GetDeviceDatasourceInstanceAlertSettingListOfDeviceDefault{
		_statusCode: code,
	}
}

/* GetDeviceDatasourceInstanceAlertSettingListOfDeviceDefault describes a response with status code -1, with default header values.

Error
*/
type GetDeviceDatasourceInstanceAlertSettingListOfDeviceDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the get device datasource instance alert setting list of device default response
func (o *GetDeviceDatasourceInstanceAlertSettingListOfDeviceDefault) Code() int {
	return o._statusCode
}

func (o *GetDeviceDatasourceInstanceAlertSettingListOfDeviceDefault) Error() string {
	return fmt.Sprintf("[GET /device/devices/{deviceId}/alertsettings][%d] getDeviceDatasourceInstanceAlertSettingListOfDevice default  %+v", o._statusCode, o.Payload)
}
func (o *GetDeviceDatasourceInstanceAlertSettingListOfDeviceDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetDeviceDatasourceInstanceAlertSettingListOfDeviceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
