// Code generated by go-swagger; DO NOT EDIT.

package lm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/logicmonitor/lm-sdk-go/v3/models"
)

// AddAppliesToFunctionReader is a Reader for the AddAppliesToFunction structure.
type AddAppliesToFunctionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddAppliesToFunctionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddAppliesToFunctionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewAddAppliesToFunctionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAddAppliesToFunctionOK creates a AddAppliesToFunctionOK with default headers values
func NewAddAppliesToFunctionOK() *AddAppliesToFunctionOK {
	return &AddAppliesToFunctionOK{}
}

/* AddAppliesToFunctionOK describes a response with status code 200, with default header values.

successful operation
*/
type AddAppliesToFunctionOK struct {
	Payload *models.AppliesToFunction
}

func (o *AddAppliesToFunctionOK) Error() string {
	return fmt.Sprintf("[POST /setting/functions][%d] addAppliesToFunctionOK  %+v", 200, o.Payload)
}
func (o *AddAppliesToFunctionOK) GetPayload() *models.AppliesToFunction {
	return o.Payload
}

func (o *AddAppliesToFunctionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppliesToFunction)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddAppliesToFunctionDefault creates a AddAppliesToFunctionDefault with default headers values
func NewAddAppliesToFunctionDefault(code int) *AddAppliesToFunctionDefault {
	return &AddAppliesToFunctionDefault{
		_statusCode: code,
	}
}

/* AddAppliesToFunctionDefault describes a response with status code -1, with default header values.

Error
*/
type AddAppliesToFunctionDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the add applies to function default response
func (o *AddAppliesToFunctionDefault) Code() int {
	return o._statusCode
}

func (o *AddAppliesToFunctionDefault) Error() string {
	return fmt.Sprintf("[POST /setting/functions][%d] addAppliesToFunction default  %+v", o._statusCode, o.Payload)
}
func (o *AddAppliesToFunctionDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddAppliesToFunctionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
